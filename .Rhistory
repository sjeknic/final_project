fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
ggplot(input_data, aes(x=colname)) + geom_histogram(binwidth=binwidth)
}
refine_plot <- function(plot, ...) {
for(arg in list(...)){
# Check that the argument is valid
if(!hasName(ggplot2, arg)){
stop(cat("Only ggplot2 functions can be used for formatting.",
"Could not find ", arg), call. = FALSE)
}
# Add the argument to the plot object
plot <- plot + arg
}
plot
}
# fig3a <- ggplot(st4, aes(x=Avg.lifetime)) + geom_histogram(binwidth=0.5) +
#   xlim(0, 10) + ylim(0, 160)
# fig3b <- ggplot(st6, aes(x=Elongation.Rate..nt.s.)) + geom_histogram(binwidth=5) +
#   xlim(0, 75) + ylim(0, 70)
# grid.arrange(fig3a, fig3b, ncol=2)
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime")
plot <- refine_plot(plot, geom_histogram(binwidth=0.5), xlim(0, 10), ylim(0, 160))
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
ggplot(input_data, aes(x=as_string(colname))) + geom_histogram(binwidth=binwidth)
}
refine_plot <- function(plot, ...) {
for(arg in list(...)){
# Check that the argument is valid
if(!hasName(ggplot2, arg)){
stop(cat("Only ggplot2 functions can be used for formatting.",
"Could not find ", arg), call. = FALSE)
}
# Add the argument to the plot object
plot <- plot + arg
}
plot
}
# fig3a <- ggplot(st4, aes(x=Avg.lifetime)) + geom_histogram(binwidth=0.5) +
#   xlim(0, 10) + ylim(0, 160)
# fig3b <- ggplot(st6, aes(x=Elongation.Rate..nt.s.)) + geom_histogram(binwidth=5) +
#   xlim(0, 75) + ylim(0, 70)
# grid.arrange(fig3a, fig3b, ncol=2)
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime")
plot <- refine_plot(plot, geom_histogram(binwidth=0.5), xlim(0, 10), ylim(0, 160))
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth)
fig
}
refine_plot <- function(plot, ...) {
for(arg in list(...)){
# Check that the argument is valid
if(!hasName(ggplot2, arg)){
stop(cat("Only ggplot2 functions can be used for formatting.",
"Could not find ", arg), call. = FALSE)
}
# Add the argument to the plot object
plot <- plot + arg
}
plot
}
# fig3a <- ggplot(st4, aes(x=Avg.lifetime)) + geom_histogram(binwidth=0.5) +
#   xlim(0, 10) + ylim(0, 160)
# fig3b <- ggplot(st6, aes(x=Elongation.Rate..nt.s.)) + geom_histogram(binwidth=5) +
#   xlim(0, 75) + ylim(0, 70)
# grid.arrange(fig3a, fig3b, ncol=2)
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime")
plot <- refine_plot(plot, geom_histogram(binwidth=0.5), xlim(0, 10), ylim(0, 160))
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth)
fig
}
refine_plot <- function(plot, ...) {
for(arg in list(...)){
# Check that the argument is valid
if(!hasName(ggplot2, arg)){
stop(cat("Only ggplot2 functions can be used for formatting.",
"Could not find ", arg), call. = FALSE)
}
# Add the argument to the plot object
plot <- plot + arg
}
plot
}
# fig3a <- ggplot(st4, aes(x=Avg.lifetime)) + geom_histogram(binwidth=0.5) +
#   xlim(0, 10) + ylim(0, 160)
# fig3b <- ggplot(st6, aes(x=Elongation.Rate..nt.s.)) + geom_histogram(binwidth=5) +
#   xlim(0, 75) + ylim(0, 70)
# grid.arrange(fig3a, fig3b, ncol=2)
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5)
plot <- refine_plot(plot, geom_histogram(binwidth=0.5), xlim(0, 10), ylim(0, 160))
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1, xlim=10, ylim=160) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, 10) + ylim(0, 160)
fig
}
refine_plot <- function(plot, ...) {
for(arg in list(...)){
# Check that the argument is valid
if(!hasName(ggplot2, arg)){
stop(cat("Only ggplot2 functions can be used for formatting.",
"Could not find ", arg), call. = FALSE)
}
# Add the argument to the plot object
plot <- plot + arg
}
plot
}
# fig3a <- ggplot(st4, aes(x=Avg.lifetime)) + geom_histogram(binwidth=0.5) +
#   xlim(0, 10) + ylim(0, 160)
# fig3b <- ggplot(st6, aes(x=Elongation.Rate..nt.s.)) + geom_histogram(binwidth=5) +
#   xlim(0, 75) + ylim(0, 70)
# grid.arrange(fig3a, fig3b, ncol=2)
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xlim=10, ylim=160)
plot <- refine_plot(plot, geom_histogram(binwidth=0.5), xlim(0, 10), ylim(0, 160))
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1, xlim=10, ylim=160) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
refine_plot <- function(plot, ...) {
for(arg in list(...)){
# Check that the argument is valid
if(!hasName(ggplot2, arg)){
stop(cat("Only ggplot2 functions can be used for formatting.",
"Could not find ", arg), call. = FALSE)
}
# Add the argument to the plot object
plot <- plot + arg
}
plot
}
# fig3a <- ggplot(st4, aes(x=Avg.lifetime)) + geom_histogram(binwidth=0.5) +
#   xlim(0, 10) + ylim(0, 160)
# fig3b <- ggplot(st6, aes(x=Elongation.Rate..nt.s.)) + geom_histogram(binwidth=5) +
#   xlim(0, 75) + ylim(0, 70)
# grid.arrange(fig3a, fig3b, ncol=2)
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xlim=10, ylim=160)
plot <- refine_plot(plot, geom_histogram(binwidth=0.5), xlim(0, 10), ylim(0, 160))
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1, xh=10, yh=200) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1, xh=10, yh=200) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=1, xh=10, yh=200) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
plot
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=0.5, xh=10, yh=160) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
plot
load_raw_data('sss')
devtools::load_all(".")
load_raw_data('sss')
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=0.5, xh=10, yh=160) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
plot
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
context("Final project tests")
# Smoke tests
# Confirm that the input data is the correct size
test_that("Correct shape", {
data <- load_raw_data("supp_table4.csv")
expect_equal(nrow(data), 847)
expect_equal(ncol(data), 6)
})
devtools::test()
path
devtools::test()
load_raw_data('supp_table4.csv')
data <- load_raw_data('supp_table4.csv')
data
devtools::test()
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=0.5, xh=10, yh=160) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
plot
source("~/Projects/finalproject/analysis/replicate_figure.R")
require(tidyverse)
require(ggplot2)
require(gridExtra)
load_raw_data <- function(filename, data_path="analysis/data/raw_data") {
fname <- file.path(data_path, filename)
if(!file.exists(fname)) {
stop(cat("Could not find file ", fname), call. = FALSE)
}
df <- read.csv(file.path(data_path, filename))
}
confirm_columns <- function(input_data, colname) {
# Confirm that the column name exists
if(is.null(input_data[[colname]])) {
stop(cat("Missing column ", colname, "in data frame ", input_data), call. = FALSE)
}
}
plot_histogram <- function(input_data, colname, binwidth=0.5, xh=10, yh=160) {
# Confirm that the columns exist
confirm_columns(input_data, colname)
# Generate basic plot object
fig <- ggplot(input_data, aes_string(x=colname)) + geom_histogram(binwidth=binwidth) + xlim(0, xlim) + ylim(0, ylim)
fig
}
newst <- load_raw_data("supp_table4.csv")
plot <- plot_histogram(newst, "Avg.lifetime", binwidth=0.5, xh=10, yh=160)
plot
devtools::test()
setwd(dirname(getwd()))
devtools::test()
load('finalproject')
devtools::test()
devtools::test()
devtools::test()
devtools::load_all(".")
devtools::load_all(".")
devtools::test()
source("~/Projects/finalproject/analysis/replicate_figure.R")
devtools::test()
data <- load_raw_data("supp_table4.csv")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
load_all()
rm(list = c("confirm_columns", "load_raw_data", "plot_histogram"))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
